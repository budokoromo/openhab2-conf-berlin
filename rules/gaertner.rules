/*
 * 18:29:28.381 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo maxdome - maxdome
18:29:28.381 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo netflix - Netflix
18:29:28.382 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo lovefilm.de - Amazon Prime Video
18:29:28.383 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo dazn - DAZN
18:29:28.384 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo ui30 - Wuaki.tv
18:29:28.385 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo googleplaymovieswebos - Google Play Filme
18:29:28.385 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo youtube.leanback.v4 - YouTube
18:29:28.386 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livetv - LiveTV
18:29:28.387 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.discovery - LG Content Store
18:29:28.388 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.voice - Suche
18:29:28.388 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.tvguide - PROGRAMMFÜHRER
18:29:28.389 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.browser - Webbrowser
18:29:28.390 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.tvuserguide - Benutzeranleitung
18:29:28.391 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.music - Musik
18:29:28.392 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.photovideo - Foto und Video
18:29:28.393 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.recordings - Aufnahmen
18:29:28.393 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.scheduler - Planer
18:29:28.394 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.miracast - Screen Share
18:29:28.395 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.connectionwizard - Geräteanschluss
18:29:28.396 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.camera - Kamera
18:29:28.397 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.multiview - Multi-view
18:29:28.397 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.accessibility - Barrierefreiheit
18:29:28.398 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.notificationcenter - Benachrichtigungen
18:29:28.399 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.adapp - Werbung
18:29:28.400 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.brandshop - Brand Shop
18:29:28.401 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.facebooklogin - Thirdparty Login
18:29:28.401 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.inputcommon - InputCommon
18:29:28.402 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.membership - LG-Mitgliedschaft
18:29:28.403 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.palm.app.firstuse - Erste Verwendung
18:29:28.404 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.palm.app.settings - Einstellungen
18:29:28.405 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.hdmi1 - HDMI-1
18:29:28.406 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.cameragallery - Kameragalerie
18:29:28.407 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.channeledit - SENDERMANAGER
18:29:28.408 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.channelsetting - Sendereinstellung
18:29:28.409 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.cheeringtv - Cheering Mode
18:29:28.409 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.container - Enyo (2.6) App Container
18:29:28.410 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.crb - Connected Red Button
18:29:28.411 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.customersupport - Kundendienst
18:29:28.412 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.dvrpopup - DvrPopup
18:29:28.413 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.eula - User Agreement
18:29:28.413 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.externalinput.av1 - AV
18:29:28.414 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.externalinput.av2 - AV-2
18:29:28.415 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.externalinput.component - Komponente
18:29:28.416 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.externalinput.scart - AV-1
18:29:28.416 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.factorywin - QML Factorywin
18:29:28.417 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.favshows - My Content
18:29:28.418 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.hdmi2 - HDMI-2
18:29:28.419 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.hdmi3 - HDMI-3
18:29:28.420 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.hdmi4 - HDMI-4
18:29:28.420 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.inputmgr - Input Hub
18:29:28.421 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.installation - Installation Settings
18:29:28.422 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livehbbtv - Live HbbTV
18:29:28.423 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livezoom-inhdmi1 - Live Zoom App
18:29:28.424 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livezoom-inhdmi2 - Live Zoom App
18:29:28.425 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livezoom-inhdmi3 - Live Zoom App
18:29:28.426 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livezoom-inhdmi4 - Live Zoom App
18:29:28.427 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livezoom-inphotovideo - Live Zoom App
18:29:28.428 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livezoom-insmhl - Live Zoom App
18:29:28.429 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.livezoom-intv - Live Zoom App
18:29:28.430 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.mvpdwin - MVPDWin
18:29:28.431 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.mystarter - My Starter
18:29:28.432 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.remotesetting - Einstellung der Fernbedienung
18:29:28.432 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.screensaver - Screen Saver
18:29:28.433 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.softwareupdate - Software Update
18:29:28.434 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.store-demo - Demo im Geschäft
18:29:28.435 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.systemmusic - Music Overlay
18:29:28.436 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.tvhotkey - Local Control Panel
18:29:28.436 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.tvsimpleviewer - Viewer
18:29:28.437 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.tvtutorial - Adjust camera angle
18:29:28.438 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twindemo - Twin USB Demo
18:29:28.439 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinlivezoom-inphotovideo - Twin Live Zoom App
18:29:28.440 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinlivezoom-intwindemo - Twin Live Zoom App
18:29:28.440 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinwizard - Twin-Setup-Assistent
18:29:28.441 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-inhdmi1 - Twin Zoom App
18:29:28.442 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-inhdmi2 - Twin Zoom App
18:29:28.443 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-inhdmi3 - Live Zoom App
18:29:28.443 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-inhdmi4 - Twin Zoom App
18:29:28.444 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-inmiracast - Twin Zoom App
18:29:28.445 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-inphotovideo - Twin Zoom App
18:29:28.446 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-inrecordings - Twin Zoom App
18:29:28.447 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-intv - Twin Zoom App
18:29:28.448 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.twinzoom-intwindemo - Twin Zoom App
18:29:28.448 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo com.webos.app.webapphost - Web App
18:29:28.449 [DEBUG] [nnectsdk.handler.LauncherApplication] - AppInfo de.2kit.castbrowserlg - TV Cast
*/




//import org.openhab.core.library.types.*
//import org.openhab.core.library.types.DecimalType
import org.eclipse.smarthome.core.library.types.DecimalType
//import org.eclipse.smarthome.core.library.types.*
import java.util.ArrayList
//import java.util.Arrays
import java.util.List
//import java.util.Map
import java.util.HashMap
//import java.util.Set
//import java.util.List

//import org.junit.Assert.*



var HSBType hsbValue
var HSBType hsbValue2
var String  redValue
var String  greenValue
var String  blueValue

val HSBType hueColorTV = new HSBType("302,92,20")
val HSBType hueColorSTANDARD = new HSBType("302,92,20")
val HSBType hueColorGAME = new HSBType("302,92,20")
val HSBType hueColorCANDLE = new HSBType("302,92,20")
val	HSBType hueColorLIGHT = new HSBType("56,18,83")
val	HSBType hueColorDAWN = new HSBType("56,18,83")
val	HSBType hueColorPINK = new HSBType("302,92,20")
//val HSBType hueColorCANDLELIGHT = new HSBType("5643,77,97")  // h / 65535 * 360, s / 255 * 100, b / 255 * 100
val HSBType hueColorCANDLELIGHT = new HSBType("31,36,30")  


// defines for Hue Groups
val String hueBaseUtilName = 	"hue-utility.fritz.box"
val String hueBaseUtilUser = 	"3Wm1f-cxUmbAphsrBkkQJAmimL1NEv-3hSYW9-iF"
val String hueBaseLivName = 	"hue-living.fritz.box"
val String hueBaseLivUser =	 	"b-MWuUtzyAY-YkQYqcMq2yEXq0to9skQgb5QYFbA"

val String hueKeyName		= "name"
val String hueKeyBase		= "base"
val String hueKeyUID		= "uID"
val String hueKeyGID		= "gID"

val String hueGrpLivID		= "living"
val String hueGrpLivName 	= "Living Room"
val String hueGrpLivGrp 	= "1"

val String hueGrpKitID		= "kitchen"
val String hueGrpKitName 	= "Kitchen"
val String hueGrpKitGrp 		= "2"

val String hueGrpBathID		= "bath"
val String hueGrpBathName 	= "Bath"
val String hueGrpBathGrp 	= "4"

val String hueGrpFloorID	= "floor"
val String hueGrpFloorName 	= "Floor"
val String hueGrpFloorGrp 	= "5"

val String hueGrpSleepID	= "sleep"
val String hueGrpSleepName 	= "Sleeping Room"
val String hueGrpSleepGrp 	= "1"


var Number testNumber = 12

val List<String> yamahaInputType = newArrayList("AV1", "AV2", "AV3", "AV4", "AV5", "AV6", "AV7", "V-AUX", "AUDIO1", "AUDIO2", "AUDIO3", "AUDIO4", "iPod", "Napster", "NET RADIO", "MULTI CH", "PC", "PHONO", "TUNER", "USB")
val List<String> yamahaSurrType = newArrayList(	"2ch Stereo", "7ch Stereo", "Hall in Munich", "The Bottom Line", "The Roxy Theatre", "Hall in Vienna", "Chamber", "Cellar Club", // MUSIC 
												"Standard", "Spectacle", "Sci-Fi", "Adventure", "Drama", "Mono Movie", // MOVIE
												"Sports", "Action Game", "Roleplaying Game", "Music Video",  // Entertainment
												"Surround Decoder" )

val String yInputDUNE = 	"AV2"
val String yInputVUSOLO4K = "AV1"
val String yInputPS4BLACK = "AV3"
val String yInputPS4PRO = 	"AV6"
val String yInputPS3 = 		"AV4"
val String yInputCHROME = 	"AV5"
val String yInputAMAZON = 	"AV7"
val String yInputTV =	 	"AUDIO1"

val String ySurrMOVIEADV =	"Adventure"
val String ySurrENTACTGAME ="Action Game"
val String ySurr2CH ="2ch Stereo"





// lgvt
val String lgtvInputAMP = "HDMI_1"
val String lgtvInputHDMI2 = "HDMI_2"
val String lgtvInputHDMI3 = "HDMI_3"


// DUNE
// find codes here: http://dune-hd.com/firmware/rc/
val String duneHTTP = "http://192.168.11.71/cgi-bin/do?cmd=ir_code&ir_code="

val String duneCodeON = 		"A05FBF00"
val String duneCodeOFF = 		"A15EBF00"
val String duneCodeSELECT = 	"BD42BF00"
val String duneCodePAGEUP = 	"B44BBF00"
val String duneCodePAGEDOWN = 	"B34CBF00"
val String duneCodeUP = 		"EA15BF00"
val String duneCodeDOWN = 		"E916BF00"
val String duneCodeLEFT = 		"E817BF00"
val String duneCodeRIGHT = 		"E718BF00"
val String duneCodeENTER = 		"EB14BF00"
val String duneCodeRETURN = 	"FB04BF00"
val String duneCodeINFO = 		"AF50BF00"
val String duneCodePOPUPMENU = 	"F807BF00"
val String duneCodeTOPMENU = 	"AE51BF00"
val String duneCodePREV =	 	"B649BF00"
val String duneCodeNEXT = 		"E21DBF00"
val String duneCodeSTOP = 		"E619BF00"
val String duneCodeSUBTITLE = 	"AB54BF00"
val String duneCodeAUDIO = 		"BB44BF00"
val String duneCodePLAYPAUSE = 	"A956BF00"
val String duneCodeTOPMENUDUNE ="A857BF00"
val String duneCodeSETUP =		"B14EBF00"


//var ArrayList<String> hueGroupParams = new ArrayList()
//var HashMap<String, ArrayList<String>> hueGroups = new HashMap()  // Hashmap for alert Texts
var HashMap<String, ArrayList<String>> hueGroups = new HashMap()  // Hashmap for alert Texts
var HashMap<String, HashMap<String, String>> hueGroupsMap = new HashMap(10)
var HashMap<String, String> hueGroupData = new HashMap(6)







val org.eclipse.xtext.xbase.lib.Functions$Function4 toggleHueGroup = [
		String base,
		String uID,
		String gID,
    	org.eclipse.smarthome.core.library.items.SwitchItem toggle |
	var String trueFalseState 
	var String output

	
	switch(toggle.state) {
		case ON:
			trueFalseState = "true"
		case OFF:
			trueFalseState = "false"
	}
 
    logInfo("togglHueGroup", "togglHueGroup: " +
    										hueKeyBase + ":" + base + ", " +
    			hueKeyUID + ":" + uID + ", " +
    			hueKeyGID + ":" + gID + ", "
    			)

 
	val String input1 = "http://" + base + "/api/" + uID + "/groups/" + gID + "/action"
	val String input2 = '{"on" : ' + trueFalseState +'}' 
  
	logInfo("switchHueGroup","switchHueGroup - input: " + input1 + " " + input2)
	
	output = sendHttpPutRequest("http://" + base + "/api/" + uID + "/groups/" + gID + "/action", 
								"application/json", 
								'{"on" : ' + trueFalseState +'}' )
    
	logInfo("Switch Light OFF","Switch Light OFF Command sent - output: " + output)
	
	return 0
]



// Set Color on a complete hue group
val org.eclipse.xtext.xbase.lib.Functions$Function4 colorHueGroup = [
		String base,		// base IP
		String uID,			// User ID
		String gID,			// group ID
    	HSBType color |		// color in HSB Format

	var String output
	
    // Umrechnung der Wertesysteme HSB: hue = [0..360], sat = [0..100], bri = [0..100] / Philips: hue = [0..65535], sat = [0-255], bri = [0..255]
    var int hue = Math.round(color.getHue().floatValue() / 360 * 65535)
    var int sat = Math.round(color.getSaturation().floatValue()  / 100 * 255)
    var int bri = Math.round(color.getBrightness().floatValue()  / 100 * 255)
            
  	
	output = sendHttpPutRequest("http://" + base + "/api/" + uID + "/groups/" + gID + "/action", 
								"application/json", 
								'{"hue": ' +  hue + ', "sat" : ' + sat + ', "bri" : ' + bri+ ' }' )
    
	logInfo("colorHueGroup","Set new color for group - output: " + output)
	
	return 0
]



// Start Scene on a complete hue group
val org.eclipse.xtext.xbase.lib.Functions$Function4 sceneHueGroup = [
		String base,		// base IP
		String uID,			// User ID
		String gID,			// group ID
    	String scene |		// color in HSB Format

	var String output
	
  	
	output = sendHttpPutRequest("http://" + base + "/api/" + uID + "/groups/" + gID + "/action", 
								"application/json", 
								'{"scene": "' +  scene + '" }' )
    
	logInfo("sceneHueGroup","Set new scene for group - output: " + output)
	
	return 0
]





rule "Set RGB value Kitchen"
when
	Item hueKitMainColor received update
then
    var hsbValue = hueKitMainColor.state as HSBType		// get color from state of Color Item 
    var roomID = hueGroupsMap.get(hueGrpKitID)			// get Room ID from Hash Map
	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hsbValue)	    
end




rule "Set RGB value Living"
when
	Item hueLivMainColor received update
then
    var hsbValue = hueLivMainColor.state as HSBType
    var roomID = hueGroupsMap.get(hueGrpLivID)
	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hsbValue)	    
end




rule "Set RGB value Floor"
when
	Item hueFloorMainColor received update
then
    var hsbValue = hueFloorMainColor.state as HSBType
    var roomID = hueGroupsMap.get(hueGrpFloorID)
	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hsbValue)	    
end





rule "Set RGB value Sleep"
when
	Item hueSleepMainColor received update
then
    var hsbValue = hueSleepMainColor.state as HSBType
    var roomID = hueGroupsMap.get(hueGrpSleepID)
	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hsbValue)	    
end




rule "Set RGB value Bath"
when
	Item hueBathMainColor received update
then
    var hsbValue = hueBathMainColor.state as HSBType
    var roomID = hueGroupsMap.get(hueGrpBathID)
	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hsbValue)	    
end



// Küche
rule "Switch Scene Kitchen Light"
when
	Item sceneHueKitLight received command ON
then
    var roomID = hueGroupsMap.get(hueGrpKitID)
	var HSBType lightColor = hueColorLIGHT

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueKitMainColor.send(lightColor)
end


rule "Switch Scene Kitchen Candle"
when
	Item sceneHueKitCandle received command ON
then
    var roomID = hueGroupsMap.get(hueGrpKitID)
	var HSBType lightColor = hueColorCANDLELIGHT

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueKitMainColor.send(lightColor)
end


rule "Switch Scene Kitchen Dawn"
when
	Item sceneHueKitDawn received command ON
then
    var roomID = hueGroupsMap.get(hueGrpKitID)			// get Room ID from Hash Map
	sceneHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), "A0X9mTCNbcNGa3Q")	    

//    var roomID = hueGroupsMap.get(hueGrpKitID)
//	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hueColorDAWN)
end


	    
// Bad
rule "Switch Scene Bath Light"
when
	Item sceneHueBathLight received command ON
then
    var roomID = hueGroupsMap.get(hueGrpBathID)
	var HSBType lightColor = hueColorLIGHT

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueBathMainColor.send(lightColor)
end


rule "Switch Scene Bath Candle"
when
	Item sceneHueBathCandle received command ON
then
    var roomID = hueGroupsMap.get(hueGrpBathID)
	var HSBType lightColor = hueColorCANDLELIGHT

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueBathMainColor.send(lightColor)
end


rule "Switch Scene Bath Pink"
when
	Item sceneHueBathPink received command ON
then
    var roomID = hueGroupsMap.get(hueGrpBathID)
	var HSBType lightColor = hueColorPINK

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueBathMainColor.send(lightColor)
end



// Sleepingroom
rule "Switch Scene Sleep Light"
when
	Item sceneHueSleepLight received command ON
then
    var roomID = hueGroupsMap.get(hueGrpSleepID)
	var HSBType lightColor = hueColorLIGHT

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueSleepMainColor.send(lightColor)
end


rule "Switch Scene Sleep Candle"
when
	Item sceneHueSleepCandle received command ON
then
    var roomID = hueGroupsMap.get(hueGrpSleepID)
	var HSBType lightColor = hueColorCANDLELIGHT

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueSleepMainColor.send(lightColor)
end


rule "Switch Scene Sleep Pink"
when
	Item sceneHueSleepPink received command ON
then
    var roomID = hueGroupsMap.get(hueGrpSleepID)
	var HSBType lightColor = hueColorPINK

	colorHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), lightColor)
	hueSleepMainColor.send(lightColor)
end




/*
rule "toggle Light"
    when
            Item hueSleepMainToggle changed or
            Item hueLivMainToggle changed or
            Item hueKitMainToggle changed or
            Item hueFloorMainToggle changed or
            Item hueBathMainToggle changed 
            
    then
            
//	val room = gMainToggles.members.filter[s|s.lastUpdate() != null].sortBy[lastUpdate()].last as SwitchItem
	val room = gMainToggles.members.filter[s|s.lastUpdate() != null].sortBy[lastUpdate()].last as SwitchItem

	logInfo("toggle Light", "room = " + room.toString())            
	var key = hueGrpSleepID

    logInfo("switchHueGroup", "hueGroupsMap - key: " + key + ", " + 
    			hueKeyName + ":" + hueGroupsMap.get(key).get(hueKeyName) + ", " +
    			hueKeyBase + ":" + hueGroupsMap.get(key).get(hueKeyBase) + ", " +
    			hueKeyUID + ":" + hueGroupsMap.get(key).get(hueKeyUID) + ", " +
    			hueKeyGID + ":" + hueGroupsMap.get(key).get(hueKeyGID) + ", "
    			)

	var roomID = hueGroupsMap.get(hueGrpSleepID)
  	toggleHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hueSleepMainToggle)	    
		
end
 */

rule "toggle Sleep Light"
    when
            Item hueSleepMainToggle received command
    then
            
	var key = hueGrpSleepID

    logInfo("switchHueGroup", "hueGroupsMap - key: " + key + ", " + 
    			hueKeyName + ":" + hueGroupsMap.get(key).get(hueKeyName) + ", " +
    			hueKeyBase + ":" + hueGroupsMap.get(key).get(hueKeyBase) + ", " +
    			hueKeyUID + ":" + hueGroupsMap.get(key).get(hueKeyUID) + ", " +
    			hueKeyGID + ":" + hueGroupsMap.get(key).get(hueKeyGID) + ", "
    			)

 //   toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle.state.toString())	    
//   	toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle)	    
	var roomID = hueGroupsMap.get(key)
  	toggleHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hueSleepMainToggle)	    
		
end


rule "toggle Living Light"
    when
            Item hueLivMainToggle received command
    then
            
	var key = hueGrpLivID

    logInfo("switchHueGroup", "hueGroupsMap - key: " + key + ", " + 
    			hueKeyName + ":" + hueGroupsMap.get(key).get(hueKeyName) + ", " +
    			hueKeyBase + ":" + hueGroupsMap.get(key).get(hueKeyBase) + ", " +
    			hueKeyUID + ":" + hueGroupsMap.get(key).get(hueKeyUID) + ", " +
    			hueKeyGID + ":" + hueGroupsMap.get(key).get(hueKeyGID) + ", "
    			)

 //   toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle.state.toString())	    
//   	toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle)	    
	var roomID = hueGroupsMap.get(key)
  	toggleHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hueLivMainToggle)	    
		
end


rule "toggle kitchen Light"
    when
            Item hueKitMainToggle received command
    then
            
	var key = hueGrpKitID

    logInfo("switchHueGroup", "hueGroupsMap - key: " + key + ", " + 
    			hueKeyName + ":" + hueGroupsMap.get(key).get(hueKeyName) + ", " +
    			hueKeyBase + ":" + hueGroupsMap.get(key).get(hueKeyBase) + ", " +
    			hueKeyUID + ":" + hueGroupsMap.get(key).get(hueKeyUID) + ", " +
    			hueKeyGID + ":" + hueGroupsMap.get(key).get(hueKeyGID) + ", "
    			)

 //   toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle.state.toString())	    
//   	toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle)	    
	var roomID = hueGroupsMap.get(key)
  	toggleHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hueKitMainToggle)	    
		
end



rule "toggle Floor Light"
    when
            Item hueFloorMainToggle received command
    then
            
	var key = hueGrpFloorID

    logInfo("switchHueGroup", "hueGroupsMap - key: " + key + ", " + 
    			hueKeyName + ":" + hueGroupsMap.get(key).get(hueKeyName) + ", " +
    			hueKeyBase + ":" + hueGroupsMap.get(key).get(hueKeyBase) + ", " +
    			hueKeyUID + ":" + hueGroupsMap.get(key).get(hueKeyUID) + ", " +
    			hueKeyGID + ":" + hueGroupsMap.get(key).get(hueKeyGID) + ", "
    			)

 //   toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle.state.toString())	    
//   	toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle)	    
	var roomID = hueGroupsMap.get(key)
  	toggleHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hueFloorMainToggle)	    
		
end



rule "toggle Bath Light"
    when
            Item hueBathMainToggle received command
    then
            
	var key = hueGrpBathID

    logInfo("switchHueGroup", "hueGroupsMap - key: " + key + ", " + 
    			hueKeyName + ":" + hueGroupsMap.get(key).get(hueKeyName) + ", " +
    			hueKeyBase + ":" + hueGroupsMap.get(key).get(hueKeyBase) + ", " +
    			hueKeyUID + ":" + hueGroupsMap.get(key).get(hueKeyUID) + ", " +
    			hueKeyGID + ":" + hueGroupsMap.get(key).get(hueKeyGID) + ", "
    			)

 //   toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle.state.toString())	    
//   	toggleHueGroup.apply(hueGrpSleepID, hueSleepMainToggle)	    
	var roomID = hueGroupsMap.get(key)
  	toggleHueGroup.apply(roomID.get(hueKeyBase), roomID.get(hueKeyUID), roomID.get(hueKeyGID), hueBathMainToggle)	    
		
end







rule "Initialize all items"
when
    System started
then
	guardMode.send(ON)
	alarmMode.send(OFF)
	
	hueGroups.put("living", newArrayList("hue-living.fritz.box", "b-MWuUtzyAY-YkQYqcMq2yEXq0to9skQgb5QYFbA", "1"))
	
	hueGroupData.put(hueKeyName, hueGrpLivName)
	hueGroupData.put(hueKeyBase, hueBaseLivName)
	hueGroupData.put(hueKeyUID, hueBaseLivUser)
	hueGroupData.put(hueKeyGID, hueGrpLivGrp)
	hueGroupsMap.put(hueGrpLivID, new HashMap(hueGroupData))	


	hueGroupData.clear()
	hueGroupData.put(hueKeyName, hueGrpKitName)
	hueGroupData.put(hueKeyBase, hueBaseUtilName)
	hueGroupData.put(hueKeyUID, hueBaseUtilUser)
	hueGroupData.put(hueKeyGID, hueGrpKitGrp)
	hueGroupsMap.put(hueGrpKitID, new HashMap(hueGroupData))	
	

	hueGroupData.clear()
	hueGroupData.put(hueKeyName, hueGrpBathName)
	hueGroupData.put(hueKeyBase, hueBaseUtilName)
	hueGroupData.put(hueKeyUID, hueBaseUtilUser)
	hueGroupData.put(hueKeyGID, hueGrpBathGrp)
	hueGroupsMap.put(hueGrpBathID, new HashMap(hueGroupData))	
	

	hueGroupData.clear()
	hueGroupData.put(hueKeyName, hueGrpFloorName)
	hueGroupData.put(hueKeyBase, hueBaseUtilName)
	hueGroupData.put(hueKeyUID, hueBaseUtilUser)
	hueGroupData.put(hueKeyGID, hueGrpFloorGrp)
	hueGroupsMap.put(hueGrpFloorID, new HashMap(hueGroupData))	
	

	hueGroupData.clear()
	hueGroupData.put(hueKeyName, hueGrpSleepName)
	hueGroupData.put(hueKeyBase, hueBaseUtilName)
	hueGroupData.put(hueKeyUID, hueBaseUtilUser)
	hueGroupData.put(hueKeyGID, hueGrpSleepGrp)
	hueGroupsMap.put(hueGrpSleepID, new HashMap(hueGroupData))	
	
	var String key	
	var ArrayList<String> hueSet = new ArrayList(hueGroupsMap.keySet())
		
	
	for (var i = 0; i < hueSet.size(); i++) {
		key = hueSet.get(i)
	    logInfo("Initialize All Items", "hueGroupsMap - key: " + key + ", " + 
	    			hueKeyName + ":" + hueGroupsMap.get(key).get(hueKeyName) + ", " +
	    			hueKeyBase + ":" + hueGroupsMap.get(key).get(hueKeyBase) + ", " +
	    			hueKeyUID + ":" + hueGroupsMap.get(key).get(hueKeyUID) + ", " +
	    			hueKeyGID + ":" + hueGroupsMap.get(key).get(hueKeyGID) + ", "
	    			)
	}
 

// Test ecobee	
//val seconds = (House_leave_time.state as DecimalType).intValue
	val Number dc = 17
	val Number dh = 25 
	val Number hum = 71.7
	val Number rst = 22.2


//	desired_cool.send(dc as DecimalType)
//	desired_heat.send(dh as DecimalType)
//	humidity.send(hum as DecimalType)
//	remote_sensor_temp.send(rst as DecimalType)
//	use_celsius.sendCommand(ON)


end


/* 
rule "Switch Scene Movie"
when
	Item sceneMovie received command ON
then
	// switch to Movie Remote Panel
	activeHABPanel.sendCommand("Movie Remote")
	// Turn on Dune
	sendHttpGetRequest(duneHTTP + duneCodeON)
	
	// Switch Lights
	hueLivMainColor.send(hueColorTV)
	hueLivMainToggle.sendCommand(ON)
//	hueLivMainToggle.postUpdate(ON)
 
	// Turn on TV
	lgtvLivPower.sendCommand(ON)
	// Mute TV, Sound comes from AMP
	lgtvLivMute.sendCommand(OFF)	// to get rid off the crappy Mute Logo
	lgtvLivVolume.sendCommand(0)

	// Set TV Input to HDMI1
	lgtvLivInput.sendCommand(lgtvInputAMP)
	// Say Hello
	lgtvLivToast.sendCommand("Let's see some freaky Movies!")
	
	// Turn Amp On
	yamahaPower.sendCommand(ON)
	// Switch Amp Input to Dune
	yamahaInput.sendCommand(yInputDUNE)
	// Switch Surround Programm to MOVIE ADVENTURE
	yamahaSurround.sendCommand(ySurrMOVIEADV)
end
*/


rule "Switch Scene Movie"
when
	Item sceneMovie received command ON
then
	// switch to Movie Remote Panel
//	activeHABPanel.sendCommand("Movie Remote")
	// Turn on Dune
//	sendHttpGetRequest(duneHTTP + duneCodeON)
	
	// Switch Lights
	hueLivMainColor.send(hueColorTV)
	hueLivMainToggle.sendCommand(ON)
//	hueLivMainToggle.postUpdate(ON)
 
	// Turn on TV
	lgtvLivPower.sendCommand(ON)
	// Mute TV, Sound comes from AMP
	lgtvLivMute.sendCommand(OFF)	// to get rid off the crappy Mute Logo
	lgtvLivVolume.sendCommand(0)

	// Set TV Input to HDMI2
	lgtvLivInput.sendCommand(lgtvInputHDMI2)
	// Say Hello
	lgtvLivToast.sendCommand("Let's see some freaky Movies!")
	
	// Turn Amp On
	yamahaPower.sendCommand(ON)
	// Switch Amp Input to Dune
	yamahaInput.sendCommand(yInputTV)
	// Switch Surround Programm to MOVIE ADVENTURE
	yamahaSurround.sendCommand(ySurrMOVIEADV)
end


rule "Switch Scene Gaming"
when
	Item sceneGaming received command ON
then
	// Turn Off Dune
	sendHttpGetRequest( duneHTTP + duneCodeOFF)
	
	// Turn on TV
	lgtvLivPower.sendCommand(ON) 
	// Mute TV, Sound comes from AMP
	lgtvLivMute.sendCommand(OFF)	// to get rid off the crappy Mute Logo
	lgtvLivVolume.sendCommand(0)

	// Set TV Input to HDMI1
	lgtvLivInput.sendCommand(lgtvInputAMP)
	// Say Hello
	lgtvLivToast.sendCommand("Let's play some funny Gamez!")
	
	// Turn Amp On
	yamahaPower.sendCommand(ON)
	// Switch Amp Input to Dune
	yamahaInput.sendCommand(yInputPS4BLACK)
	// Switch Surround Programm to MOVIE ADVENTURE
	yamahaSurround.sendCommand(ySurrENTACTGAME)

	// switch to "Easy Remote" Panel
	activeHABPanel.sendCommand("Easy Remote")
end

rule "Switch Scene Chill"
when
	Item sceneChill received command ON
then
			// set Light
			hueLivMainColor.send(hueColorLIGHT)

			// Turn Off Dune
			sendHttpGetRequest( duneHTTP + duneCodeOFF)
			
			// Turn off TV
	    	lgtvLivPower.sendCommand(OFF)

	    	// Turn Amp OFF
	    	yamahaPower.sendCommand(OFF)
end

rule "Switch Scene Music"
when
	Item sceneMusic received command ON
then
	// Turn Off Dune
	sendHttpGetRequest( duneHTTP + duneCodeOFF)
	
	// Turn on TV
	lgtvLivPower.sendCommand(ON)
	// Mute TV, Sound comes from AMP
	lgtvLivMute.sendCommand(OFF)	// to get rid off the crappy Mute Logo
	lgtvLivVolume.sendCommand(0)
	// Set TV Input to HDMI1
	lgtvLivInput.sendCommand(lgtvInputAMP)
	// Say Hello
	lgtvLivToast.sendCommand("Let's hear cool Musix!")
	
	// Turn Amp On
	yamahaPower.sendCommand(ON)
	// Switch Amp Input to Dune
	yamahaInput.sendCommand(yInputCHROME)
	// Switch Surround Programm to MOVIE ADVENTURE
	yamahaSurround.sendCommand(ySurr2CH)

	// switch to "Easy Remote" Panel
	activeHABPanel.sendCommand("Easy Remote")
end

rule "Switch Scene Netflix"
when
	Item sceneNetflix received command ON
then
	// Turn Off Dune
	sendHttpGetRequest( duneHTTP + duneCodeOFF)
	
	// Turn on TV
	lgtvLivPower.sendCommand(ON)
	// Mute TV, Sound comes from AMP
	lgtvLivMute.sendCommand(OFF)
	lgtvLivVolume.sendCommand(0)
	
	// Say Hello
	lgtvLivToast.sendCommand("Let's play some funny Gamez!")
	
	// Turn Amp On
	yamahaPower.sendCommand(ON)
	// Switch Amp Input to Dune
	yamahaInput.sendCommand(yInputTV)
	// Switch Surround Programm to MOVIE ADVENTURE
	yamahaSurround.sendCommand(ySurrMOVIEADV)

	// Start Netflix
	lgtvLivAppLaunch.sendCommand("netflix")

	// switch to "Easy Remote" Panel
	activeHABPanel.sendCommand("Easy Remote")
end


rule "Switch Scene Computer"
when
	Item sceneComputer received command ON
then
	// Turn Off Dune
	sendHttpGetRequest( duneHTTP + duneCodeOFF)
	
	// Turn on TV
	lgtvLivPower.sendCommand(ON)
	// Mute TV, Sound comes from AMP
	lgtvLivMute.sendCommand(OFF)
	lgtvLivVolume.sendCommand(0)
	
	// Set TV Input to HDMI1
	lgtvLivInput.sendCommand(lgtvInputHDMI2)
	// Say Hello
	lgtvLivToast.sendCommand("Computer on HDMI 2")
	
	// Turn Amp On
	yamahaPower.sendCommand(ON)
	// Switch Amp Input to Dune
	yamahaInput.sendCommand(yInputTV)
	// Switch Surround Programm to MOVIE ADVENTURE
	yamahaSurround.sendCommand(ySurrMOVIEADV)

	// switch to "Easy Remote" Panel
	activeHABPanel.sendCommand("Easy Remote")
end


rule "Switch Scene VUSOLO4K"
when
	Item sceneTV received command ON
then
	// Turn Off Dune
	sendHttpGetRequest( duneHTTP + duneCodeOFF)
	
	// Turn on TV
	lgtvLivPower.sendCommand(ON)
	// Mute TV, Sound comes from AMP
	lgtvLivMute.sendCommand(OFF)
	lgtvLivVolume.sendCommand(0)
	// Set TV Input to HDMI1
	lgtvLivInput.sendCommand(lgtvInputAMP)
	// Say Hello
	lgtvLivToast.sendCommand("VUSOLO4K on AV1")
	
	// Turn Amp On
	yamahaPower.sendCommand(ON)
	// Switch Amp Input to Dune
	yamahaInput.sendCommand(yInputVUSOLO4K)
	// Switch Surround Programm to MOVIE ADVENTURE
	yamahaSurround.sendCommand(ySurrMOVIEADV)

	// switch to "Easy Remote" Panel
	activeHABPanel.sendCommand("Easy Remote")
end


rule "Switch Scene AllOff"
when
	Item sceneAllOff received command OFF
then
//			hueLivMainToggle.sendCommand(OFF)
			gPowerSwitches.send(OFF)
end 

// Dune Remote Control
rule "Receive Dune Remote Commands"
when
	Item duneRemoteCode received command
then
	sendHttpGetRequest( duneHTTP + duneRemoteCode.state.toString() )
end


// Start lgtv through Wake On LAN
rule lgtvLivWOL
when 
	Item lgtvLivPower received command ON
then
    sendCommand( lgtvLivWOL, ON) 
end





/* 

rule "Set Sync hueLivMainColor"
when
	Item gHuesLivColor changed
then
	if(gHuesLivColor.state != UNDEF) {
		logInfo("HVAC","hueLivMainColor.state =  "+ hueLivMainColor.state  )

		hueLivMainColor.state = gHuesLivColor.state as HSBType		



		hueLivMainColor.postUpdate(gHuesLivColor.state)		



//		if(gHuesLivToggle == ON)
//			hueLivMainToggle.postUpdate(ON)
//		else
//			hueLivMainToggle.postUpdate(OFF)
	
	
	
		logInfo("HVAC","hueLivMainColor.state =  "+ hueLivMainColor.state  )
		
		
	}
end
*/


rule "Switch All Lights"
when
	Item hueMainToggle received command
then
    hueLivMainToggle.sendCommand(receivedCommand)	
    hueKitMainToggle.sendCommand(receivedCommand)	
    hueFloorMainToggle.sendCommand(receivedCommand)	
    hueSleepMainToggle.sendCommand(receivedCommand)	
    hueBathMainToggle.sendCommand(receivedCommand)	
end



// Tablets on/off
rule "Switch all Tablets"
when 
	Item fyrePower received command
then
	gFyrePower.sendCommand(receivedCommand)
end


/*
rule "Switch All Lights ON"
    when
            Item hueMainToggle changed to ON
    then
            
//	var output = sendHttpPutRequest("http://hue-living.fritz.box/api/b-MWuUtzyAY-YkQYqcMq2yEXq0to9skQgb5QYFbA/groups/1/action", "application/json", '{"on" : true }' )

	var String output 
	var String key
	
	var ArrayList<String> hueSet = new ArrayList(hueGroupsMap.keySet())
		
	
	for (var i = 0; i < hueSet.size(); i++) {
		key = hueSet.get(i)
		output = sendHttpPutRequest("http://" + 
						hueGroupsMap.get(key).get(hueKeyBase) +
						"/api/" +
						hueGroupsMap.get(key).get(hueKeyUID) +
						"/groups/" +
						hueGroupsMap.get(key).get(hueKeyGID) +
						"/action", "application/json", '{"on" : true }' )
	//    logInfo("HVAC","HVAC Command sent - output: "+ '{"hue": ' +  hue + ', "sat" : ' + sat + ', "bri" : ' + bri+ ' }')
//		hueLivMainColor.postUpdate(hueLivMainColor.state)
	    logInfo("Switch Light ON","Switch Light ON Command sent - output: "+output)
	}
end


rule "Switch All Lights OFF"
    when
            Item hueMainToggle changed to OFF
    then
            
//	var output = sendHttpPutRequest("http://hue-living.fritz.box/api/b-MWuUtzyAY-YkQYqcMq2yEXq0to9skQgb5QYFbA/groups/1/action", "application/json", '{"on" : true }' )

	var ArrayList<String> hueSet = new ArrayList(hueGroupsMap.keySet())
	
	var String output 
	var String key
	
	for (var i = 0; i < hueSet.size(); i++) {
		key = hueSet.get(i)
		output = sendHttpPutRequest("http://" + 
						hueGroupsMap.get(key).get(hueKeyBase) +
						"/api/" +
						hueGroupsMap.get(key).get(hueKeyUID) +
						"/groups/" +
						hueGroupsMap.get(key).get(hueKeyGID) +
						"/action", "application/json", '{"on" : false }' )
	//    logInfo("HVAC","HVAC Command sent - output: "+ '{"hue": ' +  hue + ', "sat" : ' + sat + ', "bri" : ' + bri+ ' }')
//		hueLivMainColor.postUpdate(hueLivMainColor.state)
	    logInfo("Switch Light OFF","Switch Light OFF Command sent - output: "+output)
	}
end

*/










/* 

rule "Switch Group Light OFF"
    when
            Item hueLivMainToggle changed to OFF
    then
            
	var output = sendHttpPutRequest("http://hue-living.fritz.box/api/b-MWuUtzyAY-YkQYqcMq2yEXq0to9skQgb5QYFbA/groups/1/action", "application/json", '{"on" : false }' )
//    logInfo("HVAC","HVAC Command sent - output: "+ '{"hue": ' +  hue + ', "sat" : ' + sat + ', "bri" : ' + bri+ ' }')

	hueLivMainColor.postUpdate(hueLivMainColor.state)
    logInfo("Switch Light OFF","Switch Light OFF Command sent - output: "+output)
end



rule "Switch Light ON"
    when
            Item hueLivMainToggle changed to ON
    then
            
	var output = sendHttpPutRequest("http://hue-living.fritz.box/api/b-MWuUtzyAY-YkQYqcMq2yEXq0to9skQgb5QYFbA/groups/1/action", "application/json", '{"on" : true }' )
//    logInfo("HVAC","HVAC Command sent - output: "+ '{"hue": ' +  hue + ', "sat" : ' + sat + ', "bri" : ' + bri+ ' }')
	hueLivMainColor.postUpdate(hueLivMainColor.state)
    logInfo("Switch Light ON","Switch Light ON Command sent - output: "+output)

end


rule "Hue Change Hue group color"
when
	Item TestButton changed
then
//	var output = sendHttpPostRequest("http://192.168.1.11:80/tstat", "application/json", '{"tmode":' + receivedCommand + '}')
	var output = sendHttpPutRequest("http://hue-living.fritz.box/api/b-MWuUtzyAY-YkQYqcMq2yEXq0to9skQgb5QYFbA/groups/1/action", "application/json", '{"on": true, "hue": 2000, "effect": "colorloop"}')
    logInfo("HVAC","HVAC Command sent - output: "+output)
end	

*/

// vim: syntax=Xtend syntax=openhab
