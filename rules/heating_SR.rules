import java.math.BigDecimal
import java.util.Locale

val String filename = "heating_SR.rules"

// How to Duplicate:
// Search and replace "SR_" --> "WZ_"


/* 
rule "BD_Heizung set heating from sitemap preset element"
when
  Item BD_Heizung_Preset received command
then
    logInfo(filename, "Schnellauswahl (Sitemap -> Homematic)")
    switch (receivedCommand){
        case 0: BD_Heizung_Lowering.sendCommand(ON)
        case 1: BD_Heizung_Comfort.sendCommand(ON)
    }
    createTimer(now.plusSeconds(1)) [|
        BD_Heizung_Preset.postUpdate(-1)
    ]
end
*/




/*
 * Set the Heating when something in the Widget Menue changed
 */
rule "SR_Heat set mode from Widget select element"
when
  Item SR_Heat_WidgetMode received command
then
    logInfo(filename, "SR_Heat set Mode from Widget. Received command = %s", receivedCommand)
    switch (receivedCommand){
        case "comfort": SR_Heat_Comfort.sendCommand(ON)
        case "lower": SR_Heat_Lowering.sendCommand(ON)
        case "manu": {
        	if(SR_Heat_SetTemp.state == SR_Heat_Manu.state) {
        		SR_Heat_Manu.sendCommand(SR_Heat_SetTemp.state as Number -1) // value has to change to switch to manu mode
        	}
        	SR_Heat_Manu.sendCommand(SR_Heat_SetTemp.state as Number)
        }
        case "auto": SR_Heat_Auto.sendCommand(ON)
        case "off": SR_Heat_Manu.sendCommand(4.5)        
    }
end


/*
 * Update the Widget when someone changes from  
 * MANU-MODE to AUTO_MODE or vice versa at  
 * the Heater
 */
rule "SR_Heat update Widget from Mode"
when
  Item SR_Heat_Mode changed
then
	switch(SR_Heat_Mode.state) {
		case "AUTO-MODE": SR_Heat_WidgetMode.postUpdate("auto")
		case "MANU-MODE": SR_Heat_WidgetMode.postUpdate("manu")
	}
end


/*
 * Update the Slider of the Widget if
 * someone changes the Temperature on the 
 * Heater in MANU-MODE
 */
rule "SR_Heat set update Slider from SetTemp"
when
  Item SR_Heat_SetTemp changed
then
	if(SR_Heat_Mode.state == "MANU-MODE") {
		SR_Heat_Manu.postUpdate(SR_Heat_SetTemp.state)
	}
end



/*
rule "BD_Heizung update sitemap with window mode"
when
  Item BD_Fenster_State received update
then
    createTimer(now.plusSeconds(15)) [|
        //logInfo(filename, "Fenster-Modus <" + BD_Fenster_State.state + "><" + BD_Heizung_SetTemp.state + ">")
        if (BD_Fenster_State.state == OPEN && BD_Heizung_SetTemp.state == 12.0) {
            //logInfo(filename, "Fenster-Modus aktiviert")
            BD_Heizung_SetMode.postUpdate(4)
        } else if (BD_Fenster_State.state == CLOSED && BD_Heizung_SetTemp.state != 12.0) {
            //logInfo(filename, "Fenster-Modus deaktiviert")
            BD_Heizung_SetMode.postUpdate(BD_Heizung_Mode.state)
        } else {
            logError(filename, "Fenster-Modus nicht eindeutig")
            BD_Heizung_SetMode.postUpdate(BD_Heizung_Mode.state)
        }
    ]
end

rule "BD_Heizung update sitemap with heating mode"
when
  Item BD_Heizung_Mode received update
then
    //logInfo(filename, "Modus (Homematic -> Sitemap)")
    // Fenster-Modus pruefen: Wenn Auswahl auf "F" und update auf "A", nichts tun
    if (BD_Heizung_SetMode.state == 4 && BD_Heizung_Mode.state == 0) {
        //logInfo(filename, "Modus (Homematic -> Sitemap) kein Update da Fenster-Modus")
    } else {
        BD_Heizung_SetMode.postUpdate(BD_Heizung_Mode.state)
    }
end

rule "BD_Heizung create summary"
when
    Item BD_Heizung_SetTemp changed or
    Item BD_Heizung_ActTemp changed or
    Item BD_Heizung_Valve changed or
    Item BD_Heizung_SetMode changed
then
    if ((BD_Heizung_SetTemp.state instanceof DecimalType) && (BD_Heizung_ActTemp.state instanceof DecimalType)) {
        val BigDecimal setTemp = (BD_Heizung_SetTemp.state as DecimalType).toBigDecimal
        val BigDecimal actTemp = (BD_Heizung_ActTemp.state as DecimalType).toBigDecimal
        val mode = if (BD_Heizung_SetMode.state == 1) "âš™" else if (BD_Heizung_SetMode.state == 2) "ðŸ”¥" else ""

        if (BD_Heizung_Valve.state > 60) {
            BD_Heizung_Summary.postUpdate(String::format("( âŸ° %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
        } else if (BD_Heizung_Valve.state > 40) {
            BD_Heizung_Summary.postUpdate(String::format("( â¤Š %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
        } else if (BD_Heizung_Valve.state > 20) {
            BD_Heizung_Summary.postUpdate(String::format("( â‡ˆ %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
        } else if (BD_Heizung_Valve.state > 0) {
            BD_Heizung_Summary.postUpdate(String::format("( â†‘ %.1f Â°C) %s %.1f Â°C", setTemp, mode, actTemp))
        } else {
            if (BD_Heizung_SetMode.state == 1) {
                BD_Heizung_Summary.postUpdate(String::format("%s %.1f Â°C", mode, actTemp))
            } else if (BD_Heizung_SetMode.state == 4) {
                BD_Heizung_Summary.postUpdate(String::format("( â†» Fenster offen)  %.1f Â°C", actTemp))
            } else {
                BD_Heizung_Summary.postUpdate(String::format("%.1f Â°C", actTemp))
            }
        }
    } else {
        BD_Heizung_Summary.postUpdate("(unbekannt)")
    }
end

* 
*/
// vim: syntax=Xtend
